{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Import csv file table as a pandas dataframe\
import pandas as pd\
input_data = pd.read_csv("cnv_results_read.csv", sep='\\t', index_col=0)\
\
# Initialize variables, for appending later\
Match_list = []\
VBS_list = []\
BKLT_VBS_count = 0\
EBNA1_VBS_count = 0\
HPVE1_VBS_count = 0\
HPVE2_VBS_count = 0\
\
# Establish degenerate virus regex sequences as variables\
import re\
\
BK_LT = re.compile(r"G[AG]GGC[ATCG]\{1,30\}GCC[CT]C")\
EBNA1 = re.compile(r"G[AG]TAGC[ATCG]\{4\}GCTA[CT]C")\
HPV_E1 = re.compile(r"AT[AGT]G[CT]\{2\}[ATCG]\{3\}[AG]\{2\}C[ACT]AT")\
HPV_E2 = re.compile(r"ACCG[ATCG]\{4\}CGGT")\
\
# Find virus sequences in input_sequence with re.finditer\
for index, row in input_data.iterrows():\
    #Reset list of CNV VBSs for each new CNV and label with new CNV name\
    CNV_VBS = []\
    CNV_VBS.append(row["GDC_Aliquot"])\
    CNV_VBS.append(row["Segment_Mean"])\
    CNV_VBS.append(row["Length"])\
    #Reset VBS counts for each new CNV\
    BKLT_VBS_count = 0\
    EBNA1_VBS_count = 0\
    HPVE1_VBS_count = 0\
    HPVE2_VBS_count = 0\
    \
###\
    BK_iter = BK_LT.finditer(row["Sequence"])\
    if BK_iter:\
        for match in BK_iter:\
            #Assembling match list\
            temp_match_list = []\
            temp_match_list.append(row["GDC_Aliquot"])\
            temp_match_list.append("BK Polyomavirus Large T Anitgen")\
            temp_match_list.append(match.start()+1)\
            temp_match_list.append(match.end()+1)\
            temp_match_list.append(match.group())\
            Match_list.append(temp_match_list)\
            \
            #Adding 1 to numerator of VBS count for each CNV every time a match is found\
            BKLT_VBS_count += 1\
    #Adding total BK VBS to list of VBSs for this CNV\
    CNV_VBS.append(BKLT_VBS_count/(row["Length"]/1000))\
    \
###\
    EBNA1_iter = EBNA1.finditer(row["Sequence"])\
    if EBNA1_iter:\
        for match in EBNA1_iter:\
            #Assembling match list\
            temp_match_list = []\
            temp_match_list.append(row["GDC_Aliquot"])\
            temp_match_list.append("Epstein\'96Barr Virus Nuclear Antigen 1")\
            temp_match_list.append(match.start()+1)\
            temp_match_list.append(match.end()+1)\
            temp_match_list.append(match.group())\
            Match_list.append(temp_match_list)\
            \
            #Adding 1 to numerator of VBS count for every CNV found\
            EBNA1_VBS_count += 1\
    #Adding total BK VBS to list of VBSs for this CNV\
    CNV_VBS.append(EBNA1_VBS_count/(row["Length"]/1000))\
        \
###\
    HPVE1_iter = HPV_E1.finditer(row["Sequence"])\
    if HPVE1_iter:\
        for match in HPVE1_iter:\
            #Assembling match list\
            temp_match_list = []\
            temp_match_list.append(row["GDC_Aliquot"])\
            temp_match_list.append("Human Papillomavirus E1 Protein")\
            temp_match_list.append(match.start()+1)\
            temp_match_list.append(match.end()+1)\
            temp_match_list.append(match.group())\
            Match_list.append(temp_match_list)\
            \
            #Adding 1 to numerator of VBS count for every CNV found\
            HPVE1_VBS_count += 1\
    #Adding total BK VBS to list of VBSs for this CNV\
    CNV_VBS.append(HPVE1_VBS_count/(row["Length"]/1000))\
        \
###\
    HPVE2_iter = HPV_E2.finditer(row["Sequence"])\
    if HPVE2_iter:\
        for match in HPVE2_iter:\
            #Assembling match list\
            temp_match_list = []\
            temp_match_list.append(row["GDC_Aliquot"])\
            temp_match_list.append("Human Papillomavirus E2 Protein")\
            temp_match_list.append(match.start()+1)\
            temp_match_list.append(match.end()+1)\
            temp_match_list.append(match.group())\
            Match_list.append(temp_match_list)\
            \
            #Adding 1 to numerator of VBS count for every CNV found\
            HPVE2_VBS_count += 1\
    #Adding total BK VBS to list of VBSs for this CNV\
    CNV_VBS.append(HPVE2_VBS_count/(row["Length"]/1000))\
\
###\
    #Adding list of all VBSs for this CNV to the list of lists before moving to next row/CNV\
    VBS_list.append(CNV_VBS)\
\
# Turn match list of lists into pandas dataframe and output CSV file\
CNV_virus_match_table = pd.DataFrame(Match_list, columns=["CNV_ID","Viral_Protein","Loci_Start", "Loci_End", "Viral_Sequence"])\
CNV_virus_match_table.style.set_caption("Viral Protein Sequences within Copy Number Variation Sequences")\
print(CNV_virus_match_table)\
CNV_virus_match_table.to_csv('READ_virus_match_summary.csv', sep='\\t')\
\
# Turn VBS list of lists into a pandas dataframe and print\
VBS_table = pd.DataFrame(VBS_list, columns=["CNV_ID", "CNV_Intensity", "CNV_Size", "BKPyV_LT", "EBNA1", "HPV_E1", "HPV_E2"])\
VBS_table.style.set_caption("Virus Binding Scores")\
print(VBS_table)\
\
# Slice VBS dataframe and make trellis scatter plots using CNV intensity\
import matplotlib.pyplot as plt\
\
fig, intensity_trellis = plt.subplots(nrows=2, ncols=2, figsize = (8,8), sharex=True)\
\
intensity_trellis[0][0].scatter(VBS_table["CNV_Intensity"], VBS_table["BKPyV_LT"], color="DarkBlue")\
intensity_trellis[0][1].scatter(VBS_table["CNV_Intensity"], VBS_table["EBNA1"], color="DarkGreen")\
intensity_trellis[1][0].scatter(VBS_table["CNV_Intensity"], VBS_table["HPV_E1"], color="DarkOrange")\
intensity_trellis[1][1].scatter(VBS_table["CNV_Intensity"], VBS_table["HPV_E2"], color="DarkRed")\
\
intensity_trellis[0][0].set_title("BKPyV LT")\
intensity_trellis[0][1].set_title("EBNA1")\
intensity_trellis[1][0].set_title("HPV E1")\
intensity_trellis[1][1].set_title("HPV E2")\
\
intensity_trellis[1][0].set_xlabel("CNV Intensity")\
intensity_trellis[1][1].set_xlabel("CNV Intensity")\
intensity_trellis[0][0].set_ylabel("Virus Binding Score")\
intensity_trellis[1][0].set_ylabel("Virus Binding Score")\
\
# Slice VBS dataframe and make trellis scatter plots using CNV size\
\
fig, size_trellis = plt.subplots(nrows=2, ncols=2, figsize = (8,8), sharex=True)\
\
size_trellis[0][0].scatter(VBS_table["CNV_Size"], VBS_table["BKPyV_LT"], color="DarkBlue")\
size_trellis[0][1].scatter(VBS_table["CNV_Size"], VBS_table["EBNA1"], color="DarkGreen")\
size_trellis[1][0].scatter(VBS_table["CNV_Size"], VBS_table["HPV_E1"], color="DarkOrange")\
size_trellis[1][1].scatter(VBS_table["CNV_Size"], VBS_table["HPV_E2"], color="DarkRed")\
\
size_trellis[0][0].set_title("BKPyV LT")\
size_trellis[0][1].set_title("EBNA1")\
size_trellis[1][0].set_title("HPV E1")\
size_trellis[1][1].set_title("HPV E2")\
\
size_trellis[1][0].set_xlabel("CNV Size (bp)")\
size_trellis[1][1].set_xlabel("CNV Size (bp)")\
size_trellis[0][0].set_ylabel("Virus Binding Score")\
size_trellis[1][0].set_ylabel("Virus Binding Score")}